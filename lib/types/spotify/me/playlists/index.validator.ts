/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv from 'ajv';
import SpotifyMePlaylistsType from './index';
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: 'fast',
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export const SpotifyMePlaylistsTypeSchema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  defaultProperties: [],
  definitions: {
    SpotifyMePlaylistsExternalUrlsType: {
      defaultProperties: [],
      properties: {
        spotify: {
          type: 'string',
        },
      },
      required: ['spotify'],
      type: 'object',
    },
    SpotifyMePlaylistsImageType: {
      defaultProperties: [],
      properties: {
        height: {
          type: ['null', 'number'],
        },
        url: {
          type: 'string',
        },
        width: {
          type: ['null', 'number'],
        },
      },
      required: ['height', 'url', 'width'],
      type: 'object',
    },
    SpotifyMePlaylistsItemType: {
      defaultProperties: [],
      properties: {
        collaborative: {
          type: 'boolean',
        },
        description: {
          type: 'string',
        },
        external_urls: {
          $ref: '#/definitions/SpotifyMePlaylistsExternalUrlsType',
        },
        href: {
          type: 'string',
        },
        id: {
          type: 'string',
        },
        images: {
          items: {
            $ref: '#/definitions/SpotifyMePlaylistsImageType',
          },
          type: 'array',
        },
        name: {
          type: 'string',
        },
        owner: {
          $ref: '#/definitions/SpotifyMePlaylistsOwnerType',
        },
        public: {
          type: 'boolean',
        },
        snapshot_id: {
          type: 'string',
        },
        tracks: {
          $ref: '#/definitions/SpotifyMePlaylistsTracksType',
        },
        type: {
          type: 'string',
        },
        uri: {
          type: 'string',
        },
      },
      required: [
        'collaborative',
        'description',
        'external_urls',
        'href',
        'id',
        'images',
        'name',
        'owner',
        'public',
        'snapshot_id',
        'tracks',
        'type',
        'uri',
      ],
      type: 'object',
    },
    SpotifyMePlaylistsOwnerType: {
      defaultProperties: [],
      properties: {
        display_name: {
          type: 'string',
        },
        external_urls: {
          $ref: '#/definitions/SpotifyMePlaylistsExternalUrlsType',
        },
        followers: {
          $ref: '#/definitions/SpotifyMePlaylistsTracksType',
        },
        href: {
          type: 'string',
        },
        id: {
          type: 'string',
        },
        type: {
          type: 'string',
        },
        uri: {
          type: 'string',
        },
      },
      required: ['display_name', 'external_urls', 'href', 'id', 'type', 'uri'],
      type: 'object',
    },
    SpotifyMePlaylistsTracksType: {
      defaultProperties: [],
      properties: {
        href: {
          type: 'string',
        },
        total: {
          type: 'number',
        },
      },
      required: ['href', 'total'],
      type: 'object',
    },
  },
  properties: {
    href: {
      type: 'string',
    },
    items: {
      items: {
        $ref: '#/definitions/SpotifyMePlaylistsItemType',
      },
      type: 'array',
    },
    limit: {
      type: 'number',
    },
    next: {
      type: ['null', 'string'],
    },
    offset: {
      type: 'number',
    },
    previous: {
      type: ['null', 'string'],
    },
    total: {
      type: 'number',
    },
  },
  required: ['href', 'items', 'limit', 'next', 'offset', 'previous', 'total'],
  type: 'object',
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, 'errors'>;
export const isSpotifyMePlaylistsType = ajv.compile(
  SpotifyMePlaylistsTypeSchema,
) as ValidateFunction<SpotifyMePlaylistsType>;
export default function validateSpotifyMePlaylists(
  value: unknown,
): SpotifyMePlaylistsType {
  if (isSpotifyMePlaylistsType(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isSpotifyMePlaylistsType.errors!.filter((e: any) => e.keyword !== 'if'),
        {dataVar: 'SpotifyMePlaylistsType'},
      ) +
        '\n\n' +
        inspect(value),
    );
  }
}
